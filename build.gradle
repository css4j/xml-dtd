plugins {
	id 'java-library'
	id 'maven-publish'
}

group = 'io.sf.carte'

description = 'xml-dtd'

version = '3.5.2'

sourceSets {
	main {
		java {
			srcDirs = ['src']
			includes += ["**/*.java"]
		}
		resources {
			srcDirs = ['src']
			excludes += ["**/*.java"]
		}
	}
	test {
		java {
			srcDirs = ['junit']
			includes += ["**/*.java"]
		}
		resources {
			srcDirs = ['junit']
			excludes += ["**/*.java"]
		}
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	withJavadocJar()
	withSourcesJar()
	registerFeature('dtdparse') {
		usingSourceSet(sourceSets.main)
	}
	registerFeature('dtdecl') {
		usingSourceSet(sourceSets.main)
	}
}

dependencies {
	api 'io.sf.carte:carte-util:[3.4.0,)'
	dtdparseImplementation 'io.sf.carte:tokenproducer:[1.1.1,)'
	dtdeclImplementation 'io.sf.jclf:jclf-text:[5.0.0,)'
	testImplementation "junit:junit:4.13.1"
}

tasks.register('jvmVersionAttribute') {
	description = "Set the correct 'org.gradle.jvm.version' attribute"
	def jvmVersionAttribute = Attribute.of('org.gradle.jvm.version', Integer)
	configurations.each {
		if (it.canBeConsumed) {
			def categoryAttr = it.attributes.getAttribute(Category.CATEGORY_ATTRIBUTE)
			if (categoryAttr != null && categoryAttr.name == Category.LIBRARY) {
				def usageAttr = it.attributes.getAttribute(Usage.USAGE_ATTRIBUTE)
				if (usageAttr != null && (usageAttr.name == Usage.JAVA_API
						|| usageAttr.name == Usage.JAVA_RUNTIME)) {
					it.attributes.attribute(jvmVersionAttribute, 8)
				}
			}
		}
	}
}

compileJava.dependsOn tasks.jvmVersionAttribute

tasks.register('compileLegacyJava', JavaCompile) {
	description = 'Compile to Java 8 bytecode, except module-info'
	dependsOn tasks.compileJava
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	source = tasks.compileJava.stableSources
	classpath = tasks.compileJava.classpath
	destinationDirectory = tasks.compileJava.destinationDirectory
	modularity.inferModulePath = false
	includes = tasks.compileJava.includes
	excludes = tasks.compileJava.excludes
	excludes += ['module-info.java']
}

classes.dependsOn compileLegacyJava

// Check bytecode version, in case some other task screws it
tasks.register('checkLegacyJava') {
	description = 'Check Java 8 bytecode'
	def classdir = sourceSets.main.output.classesDirs.files.stream().findAny().get()
	def classfiles = fileTree(classdir).matching({it.exclude('module-info.class')}).files
	doFirst() {
		if (!classfiles.isEmpty()) {
			def classfile = classfiles.stream().findAny().get()
			if (classfile != null) {
				def classbytes = classfile.bytes
				def bcversion = classbytes[6] * 128 + classbytes[7]
				if (bcversion != 52) {
					throw new GradleException("Bytecode on " + classfile +
							" is not valid Java 8. Version should be 52, instead is " + bcversion)
				}
			}
		}
	}
}

classes.finalizedBy checkLegacyJava

repositories {
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
	maven {
		url "https://css4j.github.io/maven/"
		mavenContent {
			releasesOnly()
		}
		content {
			includeGroup 'io.sf.carte'
			includeGroup 'io.sf.jclf'
		}
	}
}

tasks.register('lineEndingConversion', CRLFConvert) {
	description 'Convert LICENSE.txt to Windows line endings'
	file "$rootDir/LICENSE.txt"
}

tasks.register('cleanBuildSrc') {
	description = 'Clean the buildSrc directory'
	doLast {
		delete("$rootDir/buildSrc/build")
	}
}

tasks.named('clean') {
	finalizedBy('cleanBuildSrc')
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	failOnError false
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charset', 'UTF-8')
}

// Reproducible build
tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

publishing {
	repositories {
		maven {
			name = 'mavenRepo'
			/*
			 * The following section applies to the 'publish' task:
			 *
			 * If you plan to deploy to a repository, please configure the
			 * 'mavenReleaseRepoUrl' and/or 'mavenSnapshotRepoUrl' properties
			 * (for example in GRADLE_USER_HOME/gradle.properties).
			 *
			 * Otherwise, Gradle shall create a 'build/repository' subdirectory
			 * at ${rootDir} and deploy there.
			 *
			 * Properties 'mavenRepoUsername' and 'mavenRepoPassword' can also
			 * be set (generally from command line).
			 */
			def releasesUrl
			def snapshotsUrl
			if (project.hasProperty('mavenReleaseRepoUrl') && project.mavenReleaseRepoUrl) {
				releasesUrl = mavenReleaseRepoUrl
			} else {
				releasesUrl = "${rootDir}/build/repository/releases"
			}
			if (project.hasProperty('mavenSnapshotRepoUrl') && project.mavenSnapshotRepoUrl) {
				snapshotsUrl = mavenSnapshotRepoUrl
			} else {
				snapshotsUrl = "${rootDir}/build/repository/snapshots"
			}
			url = version.endsWith('-SNAPSHOT') ? snapshotsUrl : releasesUrl
			if (project.hasProperty('mavenRepoUsername') &&
					project.hasProperty('mavenRepoPassword')) {
				credentials.username = mavenRepoUsername
				credentials.password = mavenRepoPassword
			}
		}
	}
	publications {
		maven(MavenPublication) {
			from(components.java)
			suppressAllPomMetadataWarnings()
			pom {
				description = "XML DTD utility library"
				url = "https://github.com/css4j/xml-dtd"
				licenses {
					license {
						name = "BSD 3-clause license"
						url = "https://css4j.github.io/LICENSE.txt"
					}
				}
			}
		}
	}
}
